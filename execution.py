import datetime
from abc import ABCMeta, abstractmethod

import Queue
from event import FillEvent, OrderEvent

class ExecutionHandler:
    # ExecutionHandler fills all orders at the current market price
    # it does this by handling the interaction between a set of order objects generated by Portfolio and Fill objects

    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        # takes an Order event and executes it, producing a Fill event that gets placed onto the Event queue
        raise NotImplementedError("Should implement execute_order()")

class SimulatedExecutionHandler(ExecutionHandler):
    # converts all order objects into their equivalent fill objects
    # this model does not take into account 1) latency 2) slippage/fill-ratio issues

    def __init__(self, event):
        # initializes the handler
        self.event = event

    def execute_order(self, event):
        # converts Order objects into Fill objects
        if event.type == 'ORDER':
            fill_event = FillEvent(datetime.datetime.utcnow(), event.symbol,
                                   'ARCA',  # ARCA is the exchange we get the data from
                                   event.quantity, event.direction, None)
            self.event.put(fill_event)

